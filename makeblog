#!/usr/bin/python
# makeblog - A simple offline Blog.
# Copyright (C) 2013 Stefan J. Betz <info@stefan-betz.net>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
from argparse import ArgumentParser, Namespace
from datetime import datetime
from operator import attrgetter
from os import listdir, access, F_OK, makedirs, system, chdir, walk
from os.path import dirname, exists
from pygments.formatters.html import HtmlFormatter
from pygments.lexers import get_lexer_by_name
from pygments.util import ClassNotFound
from pygments import highlight
from pytz import timezone
from re import compile, escape, MULTILINE, DOTALL
from sys import argv
from time import strftime
from uuid import uuid4 as uuidgen
from jinja2 import FileSystemLoader, Environment, StrictUndefined
from http.server import SimpleHTTPRequestHandler
from socketserver import TCPServer
import json

SLUG_ITEMS = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',
               'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
               'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6',
               '7', '8', '9', '-', ':', '_' ]
SLUG_REPLACE = { ' ':'-', 'ß':'ss', 'ü':'ue', 'ö':'oe', 'ä':'ae' }
SLUG_FILENAME_EXCLUDE = [ ':' ]

opts = ArgumentParser(prog='makeblog',description='A simple offline Blog.')
opts.add_argument('-t', '--title', metavar='TITLE', help='Create a new Article with Title')
opts.add_argument('-b', '--build', action='store_true', help='Build this Blog')
opts.add_argument('-s', '--serve', action='store_true', help='Serve this Blog')
opts.add_argument('-i', '--init', action='store_true', help='Create required directories')
options = Namespace()
opts.parse_args(namespace=options)

code_re = compile(
    r"(?:^|\s)"
    r"\$\$code"
    r"(?P<args>\([^\r\n]*\))?"
    r"[^\r\n]*\r?\n"
    r"(?P<code>.*?)\s\$\$/code"
    , DOTALL)

jinja = Environment(loader=FileSystemLoader(['templates','src']),undefined=StrictUndefined)

def pygments_css(formatter):
    with open(directorymaker('css/pygments_fruity.css'), "w") as f:
        f.write(formatter.get_style_defs('.pygments_fruity'))

def highlight_code(code, language, formatter):
    try:
        lexer = get_lexer_by_name(language)
    except ClassNotFound:
        lexer = get_lexer_by_name("text")
    highlighted = "\n\n{0}\n\n".format(highlight(code, lexer, formatter))
    return highlighted

def pygmentify(func):
    def decorator(self):
        post = func(self)
        substitutions = {}
        for match in code_re.finditer(post):
            args = match.group('args')
            lang = 'text'
            if args:
                if 'lang' in args:
                    lang = args.strip('(').strip(')').split('=')[1]
            formatter = HtmlFormatter(cssclass='pygments_fruity', style='fruity')
            pygments_css(formatter)
            substitutions[match.group()] = highlight_code(match.group('code'), lang, formatter)
        if len(substitutions) > 0:
            p = compile('|'.join(map(escape, substitutions)))
            post = p.sub(lambda x: substitutions[x.group(0)], post)
            return post
        else:
            return post
    return decorator

class Post(object):
    json_sep = compile("^---$", MULTILINE)

    def __init__(self, blog):
        self.blog = blog
        self.author = None
        self.title = None
        self.permalink = None
        self.slug = None
        self.guid = None
        self.categories = []
        self.date = timezone(self.blog.config['blog']['timezone']).localize(datetime.now())
        self.updated = None
        self._content = None
        self.next = None
        self.prev = None

    def load(self, filename):
        with open(filename) as f:
            parts = Post.json_sep.split(f.read(), maxsplit=2)
        header = json.loads(parts[1])
        self.author = header['author']
        self.title = header['title']
        if 'permalink' in header:
            self.permalink = header['permalink']
        self.guid = header['guid']
        self.categories = [category.strip() for category in header['categories'].split(',')]
        self.date = timezone(self.blog.config['blog']['timezone']).localize(datetime.strptime(header['date'], self.blog.config['blog']['dateformat']))
        self.updated = self.date
        if 'updated' in header:
            self.updated = timezone(self.blog.config['blog']['timezone']).localize(datetime.strptime(header['updated'], self.blog.config['blog']['dateformat']))
        if not self.permalink:
            self.permalink = '%s/%s/%s' % (self.blog.config['blog']['url'], self.date.strftime('%Y/%m/%d'), slugify(self.title))
        if not self.slug:
            self.slug = slugify(self.title)
        self._content = parts[2]

    def render(self):
        template = jinja.get_template('article.html')
        with open(directorymaker('%s/index.html' % self.permalink.replace('%s/' % self.blog.config['blog']['url'], '')), 'w') as f:
            f.write(template.render(post=self))

    @pygmentify
    def content(self):
        return self._content

class Blog(object):
    def __init__(self):
        with open('config.json','r') as f:
            self.config = json.load(f)

    def build(self):
        # config
        jinja.globals['blog'] = self
        jinja.globals['now'] = datetime.utcnow()
        # load all posts
        unsortedposts = []
        for filename in listdir('posts'):
            p = Post(self)
            p.load('posts/%s' % filename)
            unsortedposts.append(p)
        # sort posts by date
        posts = sorted(unsortedposts, key=attrgetter('date'))
        # link next/prev posts
        for post in posts:
            i = posts.index(post)
            if i:
                post.prev = posts[i-1]
            if i != len(posts)-1:
                post.next = posts[i+1]
        # rsync src/ to dst/ for static stuff
        system('rsync -a src/ dst')
        # render all post articles
        for post in posts:
            post.render()
        # render index page
        with open(directorymaker('index.html'), 'w') as f:
            t = jinja.get_template('chronological.html')
            startposts = posts[-5:]
            startposts.reverse()
            f.write(t.render(posts=startposts))
        # render main feed
        with open(directorymaker('feed.atom'), 'w') as f:
            t = jinja.get_template('atom.html')
            feedposts = posts[-10:]
            feedposts.reverse()
            f.write(t.render(posts=feedposts))
        # render category pages
        categoryposts = {}
        for post in posts:
            for category in post.categories:
                if not category in categoryposts:
                    categoryposts[category] = []
                categoryposts[category].append(post)
        for category in categoryposts.keys():
            with open(directorymaker('category/%s/index.html'% category), 'w') as f:
                t = jinja.get_template('category.html')
                thisposts = sorted(categoryposts[category], key=attrgetter('date'))
                thisposts.reverse()
                f.write(t.render(category=category, posts=thisposts))
        # render category index
        with open(directorymaker('category/index.html'), 'w') as f:
            t = jinja.get_template('categories.html')
            categories = list(categoryposts.keys())
            categories.sort()
            f.write(t.render(categories=categories))
        # render category feeds
        for category in categoryposts.keys():
            with open(directorymaker('category/%s/feed.atom' % category), 'w') as f:
                t = jinja.get_template('atom.html')
                feedposts = sorted(categoryposts[category], key=attrgetter('date'))[-10:]
                feedposts.reverse()
                f.write(t.render(posts=feedposts))
        # render archive pages
        timeposts = {}
        for post in posts:
            if not post.date.year in timeposts:
                timeposts[post.date.year] = {}
            if not post.date.month in timeposts[post.date.year]:
                timeposts[post.date.year][post.date.month] = []
            timeposts[post.date.year][post.date.month].append(post)
        for year in timeposts.keys():
            for month in timeposts[year].keys():
                with open(directorymaker('archive/%s/%s/index.html' % ( year, month )), 'w') as f:
                    t = jinja.get_template('archive-posts.html')
                    archiveposts = sorted(timeposts[year][month], key=attrgetter('date'))
                    archiveposts.reverse()
                    f.write(t.render(year=year, month=month, posts=archiveposts))
            with open(directorymaker('archive/%s/index.html' % year), 'w') as f:
                t = jinja.get_template('archive-annual.html')
                months = list(timeposts[year].keys())
                months.sort()
                f.write(t.render(months=months, year=year, yearposts=timeposts[year]))
        with open(directorymaker('archive/index.html'), 'w') as f:
            t = jinja.get_template('archive.html')
            years = list(timeposts.keys())
            years.sort()
            f.write(t.render(years=years))
        # static page rendering
        for path, directories, files in walk('src/'):
            for filename in files:
                if filename.endswith('.html'):
                    fname = '%s/%s' % ( path.replace('src/',''), filename )
                    with open(directorymaker(fname), 'w') as f:
                        t = jinja.get_template(fname)
                        f.write(t.render())
    
    def newpost(self, title):
        """
        Create a new Post…
        """
        filename = newfile(slugify(title))
        if access(filename, F_OK):
            print("Sorry, file already exists, but why?")
            raise SystemExit
        with open(filename, "w") as f:
            f.write("---\n")
            headers = {
                "categories":"%s" % ", ".join(self.config['blog']['categories']),
                "permalink":"%s/%s/%s" % (self.config['blog']['url'], strftime('%Y/%m/%d'), slugify(options.title)),
                "guid":"%s" % str(uuidgen()),
                "title":"%s" % options.title,
                "author":"%s" % self.config['blog']['defaultauthor'],
                "date":"%s" % strftime(self.config['blog']['dateformat'])
            }
            json.dump(headers,f,indent=1,ensure_ascii=False)
            f.write("\n---\n")
        print(filename)

def slugify(text, filename=False):
    """
    Slugifies a string.
    """
    slug = ''
    lowered = text.lower()
    if filename:
        for excludedchar in SLUG_FILENAME_EXCLUDE:
            lowered = lowered.replace(excludedchar, '')
    for char in lowered:
        if char in SLUG_REPLACE:
            slug = slug + SLUG_REPLACE[char]
        elif char in SLUG_ITEMS:
            slug = slug + char
    return slug

def newfile(slug):
    """
    Return a new file object base on slug and next free id in _posts/.
    """
    idre = compile("([0-9]*).*")
    files = sorted([int(idre.match(filename).group(1)) for filename in listdir("posts/") if idre.match(filename)])
    fileid = 1 if len(files) == 0 else files[-1]+1
    return "posts/%i-%s.html" % ( fileid, slug )

def directorymaker(path):
    """
    Creates directories required for path.
    """
    path = 'dst/%s' % path
    directories = dirname(path)
    if not exists(directories):
        makedirs(directories)
    return path

if options.title:
    b = Blog()
    b.newpost(options.title)
elif options.build:
    b = Blog()
    b.build()
elif options.serve:
    print("Starting Webserver for http://127.0.0.1:8000/")
    chdir('dst/')
    httpd = TCPServer(('127.0.0.1',8000), SimpleHTTPRequestHandler)
    httpd.serve_forever()
elif options.init:
    for directory in ('src','posts','drafts'):
        if not exists(directory):
            makedirs(directory)
    config = {
        'blog':{
            'name':'''My's Blog''',
            'url':'http://blog.domain.tld',
            'description':'Because i can!',
            'googleplus':True,
            'twitter':True,
            'categories':['category1', 'category2', 'category4' ],
            'defaultauthor':'me',
            'timezone':'Europe/Berlin',
            'dateformat':'%Y/%m/%d %H:%M:%S'
        },
        'authors':{
            'me':{
                'name':'Full Name',
                'nick':'nickname',
                'googleplus':'http...',
                'twitter':'http...',
                'amazon':'http...',
                'bitcoin':None,
                'mail':'info@domain.tld'
            }
        }
    }
    if not access('config.json', F_OK):
        with open('config.json','w') as f:
            json.dump(config,f,indent=1,ensure_ascii=False)
        print("You should edit config.json.")
